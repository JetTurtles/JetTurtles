import{_ as d,r,c as u,a,b as l,e as i,d as n,w as t,o}from"./app-Ct4xiyO9.js";const p={};function k(y,e){const s=r("font");return o(),u("div",null,[e[35]||(e[35]=a(`<h1 id="redis基础知识" tabindex="-1"><a class="header-anchor" href="#redis基础知识"><span>Redis基础知识</span></a></h1><h2 id="安装redis" tabindex="-1"><a class="header-anchor" href="#安装redis"><span>安装Redis</span></a></h2><ol><li><p>下载</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">cd /usr/local/ </span>
<span class="line">sudo wget http://download.redis.io/releases/redis-5.0.9.tar.gz</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>解压</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sudo tar xvf redis-5.0.9.tar.gz</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>编译</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">下载安装c编译环境（本地已安装gcc则跳过）</span>
<span class="line">sudo apt-get update</span>
<span class="line">sudo apt-get install gcc</span>
<span class="line">编译Redis</span>
<span class="line">sudo make distclean  &amp;&amp; sudo make</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">启动服务端</span>
<span class="line">cd /usr/local/bin/</span>
<span class="line">redis-server ../redis-5.0.9/redis.conf</span>
<span class="line">启动客户端（另起窗口）</span>
<span class="line">cd /usr/local/bin/</span>
<span class="line">redis-cli</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="redis数据类型及命令" tabindex="-1"><a class="header-anchor" href="#redis数据类型及命令"><span>Redis数据类型及命令</span></a></h2><blockquote><p>Redis数据类型由string（字符串），hash（散列表），list（列表），set（集合），zset（有序集合）等基础数据类型以及bitmaps（位图），hyperloglogs（超日志），geospatial（地理空间）等高级数据类型构成。</p></blockquote><ul><li>DEL key 删除key</li><li>EXISTS key 检查key是否存在</li><li>KEYS pattern 查找符合条件的key</li><li>EXPIRE key 设置key过期时间</li><li>PERSIST key 移除过期时间</li><li>TTL key 剩余过期时间</li><li>RANDOMKEY 随机返回一个key</li><li>TYPE key 返回key的类型</li></ul><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>string</span></a></h3>`,7)),l("ul",null,[e[3]||(e[3]=l("li",null,"SET key value 设置key的值",-1)),e[4]||(e[4]=l("li",null,"SETEX key seconds value 设置key的值和过期时间",-1)),e[5]||(e[5]=l("li",null,"SETNX key value 只有在key不存在时设置key的值",-1)),e[6]||(e[6]=l("li",null,"GET key 获取key的值",-1)),e[7]||(e[7]=l("li",null,"GETRANGE key start end 获取key中字符串值的子字符",-1)),e[8]||(e[8]=l("li",null,"MSET key value [key value ...] 同时设置一个或多个键值对",-1)),e[9]||(e[9]=l("li",null,"MGET key1 [key2..] 获取所有一个或多个给定key的值",-1)),l("li",null,[e[1]||(e[1]=i("MSETNX key value [key value ...] key")),n(s,{color:"red"},{default:t(()=>e[0]||(e[0]=[i("都不存在")])),_:1}),e[2]||(e[2]=i("时同时设置一个或多个键值对"))]),e[10]||(e[10]=l("li",null,"INCR key 将key中储存的数字值增一",-1)),e[11]||(e[11]=l("li",null,"INCRBY key increment 将key所储存的值加上给定的增量值（increment）",-1)),e[12]||(e[12]=l("li",null,"DECR key 将key中储存的数字值减一",-1)),e[13]||(e[13]=l("li",null,"DECRBY key decrement key所储存的值减去给定的减量值（decrement）",-1))]),e[36]||(e[36]=a('<h3 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>hash</span></a></h3><blockquote><p>hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p></blockquote><ul><li>HSET key field value 将key中的字段field的值设为value</li><li>HSETNX key field value 只有在字段不存在时，设置哈希表字段的值</li><li>HGET key field 获取key中filed字段的值</li><li>HMSET key field1 value1 [field2 value2 ] 同时设置多个给定字段的值</li><li>HMGET key field1 [field2] 获取所有给定字段的值</li><li>HGETALL key 获取key的所有字段和值</li><li>HKEYS key 获取所有字段</li><li>HVALS key 获取哈希表中所有值</li><li>HLEN key 获取哈希表中字段的数量</li><li>HEXISTS key field 查看key中，field的字段是否存在</li><li>HDEL key field1 [field2] 删除一个或多个字段</li><li>HINCRBY key field increment 指定字段的整数值加上增量increment</li><li>HINCRBYFLOAT key field increment 指定字段的浮点数值加上增量increment</li></ul><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>list</span></a></h3><blockquote><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）一个列表最多可以包含2<sup>32 - 1 </sup>个元素。</p></blockquote>',5)),l("ul",null,[l("li",null,[e[15]||(e[15]=i("RPUSH key value1 [value2] 在列表")),n(s,{color:"red"},{default:t(()=>e[14]||(e[14]=[i("尾部")])),_:1}),e[16]||(e[16]=i("添加一个或多个值"))]),e[26]||(e[26]=l("li",null,"RPUSHX key value 在列表尾部添加值",-1)),l("li",null,[e[18]||(e[18]=i("LPUSH key value1 [value2] 在列表")),n(s,{color:"red"},{default:t(()=>e[17]||(e[17]=[i("头部")])),_:1}),e[19]||(e[19]=i("添加一个或多个值"))]),e[27]||(e[27]=l("li",null,"LPUSHX key value 在列表头部添加值",-1)),l("li",null,[e[21]||(e[21]=i("RPOP key 移除列表")),n(s,{color:"red"},{default:t(()=>e[20]||(e[20]=[i("尾部")])),_:1}),e[22]||(e[22]=i("元素并返回值"))]),e[28]||(e[28]=l("li",null,"BRPOP key1 [key2 ] timeout 移除尾部元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止",-1)),l("li",null,[e[24]||(e[24]=i("LPOP key 移除列表")),n(s,{color:"red"},{default:t(()=>e[23]||(e[23]=[i("头部")])),_:1}),e[25]||(e[25]=i("元素并返回值"))]),e[29]||(e[29]=l("li",null,"BLPOP key1 [key2 ] timeout 移除头部元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止",-1)),e[30]||(e[30]=l("li",null,"LINDEX key index 通过索引获取列表中的元素",-1)),e[31]||(e[31]=l("li",null,"LSET key index value 通过索引设置列表元素的值",-1)),e[32]||(e[32]=l("li",null,"LINSERT key BEFORE|AFTER pivot value 在列表的元素前或者后插入元素",-1)),e[33]||(e[33]=l("li",null,"LLEN key 获取列表长度",-1)),e[34]||(e[34]=l("li",null,"LRANGE key start stop 获取列表指定范围内的元素",-1))]),e[37]||(e[37]=a('<h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>set</span></a></h3><blockquote><p>set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为2<sup>32 - 1 </sup>个元素。</p></blockquote><ul><li>SADD key member1 [member2] 向集合添加成员</li><li>SMEMBERS key 返回集合中的所有成员</li><li>SRANDMEMBER key [count] 返回集合中一个或多个随机数</li><li>SCARD key 获取集合的成员数</li><li>SISMEMBER key member 判断集合的成员</li><li>SPOP key 移除并返回集合中的一个随机元素</li><li>SREM key member1 [member2] 移除集合中成员</li><li>SSCAN key cursor [MATCH pattern] [COUNT count] 从cursor位置开始迭代集合中的元素</li><li>SDIFF key1 [key2] 返回第一个集合与其他集合之间的差异</li><li>SINTER key1 [key2] 返回给定所有集合的交集</li><li>SUNION key1 [key2] 返回所有给定集合的并集</li></ul><h3 id="zset" tabindex="-1"><a class="header-anchor" href="#zset"><span>zset</span></a></h3><blockquote><p>zset有序集合和set集合一样也是string类型元素的集合,且不允许重复的成员。 不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。 有序集合的成员是唯一的,但分数(score)却可以重复。</p></blockquote>',5))])}const m=d(p,[["render",k],["__file","redis-basics.html.vue"]]),b=JSON.parse('{"path":"/article002/redis-basics.html","title":"Redis基础知识","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"安装Redis","slug":"安装redis","link":"#安装redis","children":[]},{"level":2,"title":"Redis数据类型及命令","slug":"redis数据类型及命令","link":"#redis数据类型及命令","children":[{"level":3,"title":"string","slug":"string","link":"#string","children":[]},{"level":3,"title":"hash","slug":"hash","link":"#hash","children":[]},{"level":3,"title":"list","slug":"list","link":"#list","children":[]},{"level":3,"title":"set","slug":"set","link":"#set","children":[]},{"level":3,"title":"zset","slug":"zset","link":"#zset","children":[]}]}],"git":{"updatedTime":1725727434000,"contributors":[{"name":"aji","email":"2676168619@qq.com","commits":1}]},"filePathRelative":"article002/redis-basics.md"}');export{m as comp,b as data};
